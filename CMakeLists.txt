cmake_minimum_required(VERSION 3.12.3)
set(CMAKE_CXX_STANDARD 17)

project(frame)

################################ NANOGUI ########################################

# Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)

# Add the configurations from nanogui
add_subdirectory(ext/nanogui)

# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})

################################ NANOGUI ########################################


########################## Frame Project ########################################
include_directories(
        # On top of adding the path to nanogui/include, you may need extras
        ${NANOGUI_EXTRA_INCS}

        ext/nanogui/include

        #project header files folder
        ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# Compile a target using NanoGUI
add_executable(${PROJECT_NAME}_bin
        # SOURCE FILES
        src/main.cpp
        # HEADER FILES
        include/Viewer.h
        )

# Lastly, additional libraries may have been built for you.  In addition to linking
# against NanoGUI, we need to link against those as well.
target_link_libraries(${PROJECT_NAME}_bin nanogui ${NANOGUI_EXTRA_LIBS})

########################## Frame Project ########################################